//
// BulkWorkflowRunsAPI.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class BulkWorkflowRunsAPI {

    let client: LeapClient

    public init(client: LeapClient) {
        self.client = client
    }

    /**
     Get a bulk workflow run
     
     - parameter bulkRunId: (path) The ID of the bulk run to retrieve. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getBulkSync(bulkRunId: String, apiResponseQueue: DispatchQueue = LeapAPI.apiResponseQueue, completion: @escaping ((_ data: BulkRunSchema?, _ error: Error?) -> Void)) -> RequestTask {
        return getBulkWithRequestBuilder(bulkRunId: bulkRunId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a bulk workflow run
     
     - parameter bulkRunId: (path) The ID of the bulk run to retrieve. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    private class func getBulkAsyncMappedParams(bulkRunId: String) async throws -> BulkRunSchema {
        return try await withCheckedThrowingContinuation { continuation in
            getBulkWithRequestBuilder(bulkRunId: bulkRunId).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Get a bulk workflow run
     
     - parameter bulkRunId: (path) The ID of the bulk run to retrieve. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func getBulk(
        bulkRunId: String
    ) async throws -> BulkRunSchema {
        return try await withCheckedThrowingContinuation { continuation in
            getBulkWithRequestBuilder(bulkRunId: bulkRunId).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     Get a bulk workflow run
     
     - parameter bulkRunId: (path) The ID of the bulk run to retrieve. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open func getBulk(
        bulkRunId: String
    ) async throws -> BulkRunSchema {
        return try await withCheckedThrowingContinuation { continuation in
            getBulkWithRequestBuilder(bulkRunId: bulkRunId).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }



    /**
     Get a bulk workflow run
     - GET /v1/runs/bulk/{bulk_run_id}
     - This endpoint retrieves the details of a specific bulk workflow run using its `bulk_run_id`.
     - API Key:
       - type: apiKey X-Api-Key 
       - name: api_key
     - parameter bulkRunId: (path) The ID of the bulk run to retrieve. 
     - returns: RequestBuilder<BulkRunSchema> 
     */
    open class func getBulkWithRequestBuilder(
            bulkRunId: String
    ) -> RequestBuilder<BulkRunSchema> {
        let basePath = LeapAPI.basePath;
        var localVariablePath = "/v1/runs/bulk/{bulk_run_id}"
        let bulkRunIdPreEscape = "\(APIHelper.mapValueToPathItem(bulkRunId))"
        let bulkRunIdPostEscape = bulkRunIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{bulk_run_id}", with: bulkRunIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "X-Api-Key", value: LeapAPI.apiKey, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<BulkRunSchema>.Type = LeapAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "GET", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to GET /v1/runs/bulk/{bulk_run_id}")
    }

    /**
     Get a bulk workflow run
     - GET /v1/runs/bulk/{bulk_run_id}
     - This endpoint retrieves the details of a specific bulk workflow run using its `bulk_run_id`.
     - API Key:
       - type: apiKey X-Api-Key 
       - name: api_key
     - parameter bulkRunId: (path) The ID of the bulk run to retrieve. 
     - returns: RequestBuilder<BulkRunSchema> 
     */
    open func getBulkWithRequestBuilder(
            bulkRunId: String
    ) -> RequestBuilder<BulkRunSchema> {
        let basePath = self.client.basePath;
        var localVariablePath = "/v1/runs/bulk/{bulk_run_id}"
        let bulkRunIdPreEscape = "\(APIHelper.mapValueToPathItem(bulkRunId))"
        let bulkRunIdPostEscape = bulkRunIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{bulk_run_id}", with: bulkRunIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "X-Api-Key", value: self.client.apiKey, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<BulkRunSchema>.Type = LeapAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "GET", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to GET /v1/runs/bulk/{bulk_run_id}")
    }


    /**
     Run a workflow in bulk
     
     - parameter runBulkWorkflowSchema: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func runBulkSync(runBulkWorkflowSchema: RunBulkWorkflowSchema, apiResponseQueue: DispatchQueue = LeapAPI.apiResponseQueue, completion: @escaping ((_ data: BulkRunSchema?, _ error: Error?) -> Void)) -> RequestTask {
        return runBulkWithRequestBuilder(runBulkWorkflowSchema: runBulkWorkflowSchema).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Run a workflow in bulk
     
     - parameter runBulkWorkflowSchema: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    private class func runBulkAsyncMappedParams(runBulkWorkflowSchema: RunBulkWorkflowSchema) async throws -> BulkRunSchema {
        return try await withCheckedThrowingContinuation { continuation in
            runBulkWithRequestBuilder(runBulkWorkflowSchema: runBulkWorkflowSchema).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Run a workflow in bulk
     
     - parameter runBulkWorkflowSchema: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func runBulk(
        workflowId: String,
        inputCsvUrl: String,
        webhookUrl: String? = nil
    ) async throws -> BulkRunSchema {
        let runBulkWorkflowSchema = RunBulkWorkflowSchema(
            workflowId: workflowId,
            inputCsvUrl: inputCsvUrl,
            webhookUrl: webhookUrl
        )
        return try await withCheckedThrowingContinuation { continuation in
            runBulkWithRequestBuilder(runBulkWorkflowSchema: runBulkWorkflowSchema).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     Run a workflow in bulk
     
     - parameter runBulkWorkflowSchema: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open func runBulk(
        workflowId: String,
        inputCsvUrl: String,
        webhookUrl: String? = nil
    ) async throws -> BulkRunSchema {
        let runBulkWorkflowSchema = RunBulkWorkflowSchema(
            workflowId: workflowId,
            inputCsvUrl: inputCsvUrl,
            webhookUrl: webhookUrl
        )
        return try await withCheckedThrowingContinuation { continuation in
            runBulkWithRequestBuilder(runBulkWorkflowSchema: runBulkWorkflowSchema).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }



    /**
     Run a workflow in bulk
     - POST /v1/runs/bulk
     - This endpoint lets the user run a specified workflow with the provided csv in bulk.
     - API Key:
       - type: apiKey X-Api-Key 
       - name: api_key
     - parameter runBulkWorkflowSchema: (body)  
     - returns: RequestBuilder<BulkRunSchema> 
     */
    open class func runBulkWithRequestBuilder(
            runBulkWorkflowSchema: RunBulkWorkflowSchema
    ) -> RequestBuilder<BulkRunSchema> {
        let basePath = LeapAPI.basePath;
        let localVariablePath = "/v1/runs/bulk"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: runBulkWorkflowSchema)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "X-Api-Key", value: LeapAPI.apiKey, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<BulkRunSchema>.Type = LeapAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "POST", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to POST /v1/runs/bulk")
    }

    /**
     Run a workflow in bulk
     - POST /v1/runs/bulk
     - This endpoint lets the user run a specified workflow with the provided csv in bulk.
     - API Key:
       - type: apiKey X-Api-Key 
       - name: api_key
     - parameter runBulkWorkflowSchema: (body)  
     - returns: RequestBuilder<BulkRunSchema> 
     */
    open func runBulkWithRequestBuilder(
            runBulkWorkflowSchema: RunBulkWorkflowSchema
    ) -> RequestBuilder<BulkRunSchema> {
        let basePath = self.client.basePath;
        let localVariablePath = "/v1/runs/bulk"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: runBulkWorkflowSchema)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "X-Api-Key", value: self.client.apiKey, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<BulkRunSchema>.Type = LeapAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "POST", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to POST /v1/runs/bulk")
    }

}
